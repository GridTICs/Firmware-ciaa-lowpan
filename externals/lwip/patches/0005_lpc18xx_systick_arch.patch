lwipSysTick_Enable and mor LWIP
===================================================================
diff -urN lwip/externals/lwip/cortexM4/lpc43xx/lpc4337/src/arch/lpc18xx_43xx_systick_arch.c lwip-ciaa/externals/lwip/cortexM4/lpc43xx/lpc4337/src/arch/lpc18xx_43xx_systick_arch.c
--- lwip/externals/lwip/cortexM4/lpc43xx/lpc4337/src/arch/lpc18xx_43xx_systick_arch.c	2014-02-06 08:00:40.000000000 -0300
+++ lwip-ciaa/externals/lwip/cortexM4/lpc43xx/lpc4337/src/arch/lpc18xx_43xx_systick_arch.c	2016-06-23 10:25:43.485002438 -0300
@@ -31,8 +31,6 @@
 
 #include "lwip/opt.h"
 
-#if NO_SYS == 1
-
 #include "chip.h"
 #include "arch/lpc_arch.h"
 
@@ -47,13 +45,10 @@
 /* Saved reference period foe standalone mode */
 static uint32_t saved_period;
 
-#if (defined(CHIP_LPC43XX) && defined(CORE_M0))
-
 #define RITIMER_IRQn_PRI  (255)
 
 /* RITimer Reload value */
 static uint32_t reload_val;
-#endif
 
 /* Saved total time in mS since timer was enabled */
 static volatile u32_t systick_timems;
@@ -73,10 +68,8 @@
  * Public functions
  ****************************************************************************/
 
-#if (defined(CHIP_LPC43XX) && defined(CORE_M0))
-
 /* Enable LWIP tick and interrupt */
-void SysTick_Enable(uint32_t period)
+void lwipSysTick_Enable(uint32_t period)
 {
 	saved_period = period;
 
@@ -93,7 +86,7 @@
 }
 
 /* Disable LWIP tick */
-void SysTick_Disable(void)
+void lwipSysTick_Disable(void)
 {
 	Chip_RIT_Disable(LPC_RITIMER);
 }
@@ -104,7 +97,7 @@
  * @note	This function keeps a timebase for LWIP that can be
  * used for other functions.
  */
-void RIT_IRQHandler(void)
+void OSEK_ISR_RIT_IRQHandler(void)
 {
 	/* Clear RITimer Interrupt, Reload counter value */
 	Chip_RIT_ClearInt(LPC_RITIMER);
@@ -114,35 +107,6 @@
 	systick_timems += saved_period;
 }
 
-#else
-
-/* Enable LWIP tick and interrupt */
-void SysTick_Enable(uint32_t period)
-{
-	saved_period = period;
-	SysTick_Config((SystemCoreClock * period) / 1000);
-}
-
-/* Disable LWIP tick */
-void SysTick_Disable(void)
-{
-	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
-}
-
-/**
- * @brief	SysTick IRQ handler and timebase management
- * @return	Nothing
- * @note	This function keeps a timebase for LWIP that can be
- * used for other functions.
- */
-void SysTick_Handler(void)
-{
-	/* Increment tick count */
-	systick_timems += saved_period;
-}
-
-#endif
-
 /* Get the current systick time in milliSeconds */
 uint32_t SysTick_GetMS(void)
 {
@@ -171,4 +135,3 @@
  * @}
  */
 
-#endif /* NO_SYS == 1 */
diff -urN lwip/externals/lwip/cortexM4/lpc43xx/lpc4337/inc/arch/lpc_arch.h lwip-ciaa/externals/lwip/cortexM4/lpc43xx/lpc4337/inc/arch/lpc_arch.h
--- lwip/externals/lwip/cortexM4/lpc43xx/lpc4337/inc/arch/lpc_arch.h	2014-02-06 08:00:40.000000000 -0300
+++ lwip-ciaa/externals/lwip/cortexM4/lpc43xx/lpc4337/inc/arch/lpc_arch.h	21:00:37.376898683 -030002438 -0300
@@ -52,7 +52,7 @@
  * @note	This enables the systick interrupt and sets up the systick rate. This
  * function is only used in standalone systems.
  */
-void SysTick_Enable(uint32_t period);
+void lwipSysTick_Enable(uint32_t period);
 
 /**
  * @brief	Disable LWIP tick
@@ -60,7 +60,7 @@
  * This disables the systick interrupt. This function is only used in
  * standalone systems.
  */
-void SysTick_Disable(void);
+void lwipSysTick_Disable(void);
 
 /**
  * @brief	Get the current systick time in milliSeconds
